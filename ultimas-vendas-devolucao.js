// ultimas-vendas-devolucao.js - Sistema Profissional de Devolu√ß√µes

/**
 * Registra movimenta√ß√£o de estoque (entrada por devolu√ß√£o)
 * @param {Object} dados - Dados da movimenta√ß√£o
 */
async function registrarMovimentacaoEstoqueDevolucao(dados) {
    try {
        console.log('üîÑ INICIANDO registro de movimenta√ß√£o de estoque (devolu√ß√£o)...');
        console.log('üìã Dados recebidos para movimenta√ß√£o:', dados);
        console.log('üë§ Usu√°rio atual:', window.currentUser);
        console.log('üè¢ Empresa atual:', window.currentCompanyId);
        
        const movimentacao = {
            produto_id: dados.produto_id,
            tipo_movimentacao: dados.tipo_movimentacao,
            quantidade: dados.quantidade,
            valor_unitario: dados.valor_unitario || null,
            valor_total: dados.valor_total || null,
            documento: dados.documento || null,
            fornecedor: dados.fornecedor || null,
            observacao: dados.observacao || null,
            auth_user_id: window.currentUser?.auth_user_id || window.currentUser?.id,
            id_empresa: window.currentCompanyId
        };
        
        console.log('üìä Dados da movimenta√ß√£o preparados para inser√ß√£o:', movimentacao);
        console.log('üíæ Inserindo movimenta√ß√£o na tabela estoque_movimentacoes...');
        
        const { data, error } = await supabaseClient
            .from('estoque_movimentacoes')
            .insert([movimentacao]);

        if (error) {
            console.error('‚ùå ERRO ao inserir movimenta√ß√£o no banco:', error);
            console.error('‚ùå Detalhes do erro:', error.message);
            throw error;
        }
        
        console.log('‚úÖ SUCESSO - Movimenta√ß√£o de estoque inserida com sucesso!');
        console.log('üìä Dados da movimenta√ß√£o inserida:', data);
        return { success: true, data };

    } catch (error) {
        console.error('‚ùå ERRO GERAL na fun√ß√£o registrarMovimentacaoEstoqueDevolucao:', error);
        console.error('‚ùå Stack trace:', error.stack);
        return { success: false, error: error.message };
    }
}

/**
 * Atualiza o estoque do produto na tabela produtos
 * @param {number} produtoId - ID do produto
 * @param {number} quantidadeAlterada - Quantidade a ser alterada (positiva para entrada, negativa para sa√≠da)
 */
async function atualizarEstoqueProduto(produtoId, quantidadeAlterada) {
    try {
        console.log('üîÑ INICIANDO atualiza√ß√£o de estoque do produto...');
        console.log('üìã Produto ID:', produtoId, 'Quantidade alterada:', quantidadeAlterada);
        
        const { data: produto, error: selectError } = await supabaseClient
            .from('produtos')
            .select('quantidade_estoque')
            .eq('id', produtoId)
            .single();

        if (selectError) {
            console.error('‚ùå ERRO ao buscar produto:', selectError);
            throw selectError;
        }
        
        console.log('üìä Estoque atual do produto:', produto.quantidade_estoque);

        const novoEstoque = (produto.quantidade_estoque || 0) + quantidadeAlterada;
        console.log('üìä Novo estoque calculado:', novoEstoque);

        const { error: updateError } = await supabaseClient
            .from('produtos')
            .update({ quantidade_estoque: novoEstoque })
            .eq('id', produtoId);

        if (updateError) {
            console.error('‚ùå ERRO ao atualizar estoque:', updateError);
            throw updateError;
        }
        
        console.log('‚úÖ SUCESSO - Estoque do produto atualizado!');
        console.log('üìä Estoque anterior:', produto.quantidade_estoque, '‚Üí Novo estoque:', novoEstoque);

        return { success: true, novoEstoque };

    } catch (error) {
        console.error('‚ùå ERRO GERAL em atualizarEstoqueProduto:', error);
        console.error('‚ùå Stack trace:', error.stack);
        return { success: false, error: error.message };
    }
}

/**
 * Registra entrada de estoque por devolu√ß√£o
 * @param {Object} itemVenda - Item da venda devolvida
 * @param {number} vendaId - ID da venda
 * @param {number} quantidade - Quantidade devolvida
 */
async function registrarEntradaDevolucao(itemVenda, vendaId, quantidade) {
    try {
        console.log('üîÑ INICIANDO registro de entrada de devolu√ß√£o...');
        console.log('üìã Dados recebidos para entrada:', { itemVenda, vendaId, quantidade });
        console.log('üë§ Usu√°rio atual:', window.currentUser);
        console.log('üè¢ Empresa atual:', window.currentCompanyId);
        
        if (!window.currentUser || !window.currentCompanyId) {
            console.error('‚ùå ERRO: Usu√°rio ou empresa n√£o identificados');
            console.error('‚ùå currentUser:', window.currentUser);
            console.error('‚ùå currentCompanyId:', window.currentCompanyId);
            throw new Error('Usu√°rio ou empresa n√£o identificados');
        }
        
        // Buscar o produto_id usando o SKU da venda
        console.log(`üîç Buscando produto com SKU: ${itemVenda.produto_sku}`);
        const { data: produto, error: produtoError } = await supabaseClient
            .from('produtos')
            .select('id')
            .eq('codigo_sku', itemVenda.produto_sku)
            .eq('id_empresa', window.currentCompanyId)
            .single();
            
        if (produtoError || !produto) {
            console.error('‚ùå ERRO: Produto n√£o encontrado para SKU:', itemVenda.produto_sku, produtoError);
            return { success: false, error: `Produto n√£o encontrado para SKU: ${itemVenda.produto_sku}` };
        }
        
        console.log(`‚úÖ SUCESSO: Produto encontrado - ID ${produto.id} para SKU ${itemVenda.produto_sku}`);
        
        console.log('üîÑ Chamando registrarMovimentacaoEstoqueDevolucao...');
        const resultado = await registrarMovimentacaoEstoqueDevolucao({
            produto_id: produto.id,
            tipo_movimentacao: 'entrada',
            quantidade: Math.abs(quantidade), // Sempre positivo para entrada
            valor_unitario: itemVenda.produto_preco,
            valor_total: quantidade * itemVenda.produto_preco,
            documento: `Devolu√ß√£o Venda #${vendaId}`,
            observacao: `Devolu√ß√£o - ${itemVenda.produto_nome || 'Produto'}`,
        });
        
        console.log('üìä Resultado da movimenta√ß√£o de estoque:', resultado);
        
        if (resultado.success) {
            console.log('üîÑ Atualizando estoque do produto na tabela produtos...');
            const resultadoEstoque = await atualizarEstoqueProduto(produto.id, Math.abs(quantidade));
            console.log('üìä Resultado da atualiza√ß√£o do estoque:', resultadoEstoque);
            
            if (!resultadoEstoque.success) {
                console.error('‚ùå ERRO: Movimenta√ß√£o registrada mas estoque n√£o atualizado!');
                return { success: false, error: 'Movimenta√ß√£o registrada mas estoque n√£o foi atualizado: ' + resultadoEstoque.error };
            }
        }
        
        return resultado;
    } catch (error) {
        console.error('‚ùå ERRO GERAL em registrarEntradaDevolucao:', error);
        console.error('‚ùå Stack trace:', error.stack);
        return { success: false, error: error.message };
    }
}

async function confirmReturn() {
    console.log('‚Ü©Ô∏è Confirmando devolu√ß√£o completa da venda...');
    
    const reason = document.getElementById('return-reason').value;
    const notes = document.getElementById('return-notes').value;
    const saleNumber = document.getElementById('return-sale-number').textContent;
    
    if (!reason) {
        alert('Por favor, selecione o motivo da devolu√ß√£o.');
        return;
    }
    
    if (!saleNumber) {
        alert('Erro: N√∫mero da venda n√£o encontrado.');
        return;
    }
    
    try {
        // Mostrar loading
        const confirmBtn = document.getElementById('confirm-return-btn');
        const originalText = confirmBtn.innerHTML;
        confirmBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Processando...';
        confirmBtn.disabled = true;
        
        console.log('üîÑ Processando devolu√ß√£o completa para venda:', saleNumber);
        
        // 1. Buscar todos os itens desta venda
        const { data: itensVenda, error: fetchError } = await supabaseClient
            .from('vendas')
            .select('id, produto_sku, quantidade_unit, produto_nome, status')
            .eq('id_venda', saleNumber)
            .eq('id_empresa', window.currentCompanyId);
            
        if (fetchError) throw fetchError;
        
        if (!itensVenda || itensVenda.length === 0) {
            throw new Error('Nenhum item encontrado para esta venda.');
        }
        
        // VERIFICAR SE TODOS OS ITENS J√Å FORAM DEVOLVIDOS
        const itensJaDevolvidos = itensVenda.filter(item => item.status === 'DEVOLVIDO');
        if (itensJaDevolvidos.length === itensVenda.length) {
            alert('Todos os produtos desta venda j√° foram devolvidos anteriormente.');
            // Restaurar bot√£o antes de retornar
            const confirmBtn = document.getElementById('confirm-return-btn');
            if (confirmBtn) {
                confirmBtn.innerHTML = '<i class="fas fa-undo"></i> Confirmar Devolu√ß√£o';
                confirmBtn.disabled = false;
            }
            return;
        }
        
        console.log(`üì¶ Encontrados ${itensVenda.length} itens para devolver`);
        
        // 2. Buscar e deletar registros de cashback relacionados √† venda devolvida
        console.log('üîÑ Removendo registros de cashback da venda devolvida...');
        
        // Primeiro buscar os registros para mostrar o valor total
        const { data: cashbackRecords, error: fetchCashbackError } = await supabaseClient
            .from('cashback')
            .select('*')
            .eq('venda_id', saleNumber)
            .eq('id_empresa', window.currentCompanyId);
            
        if (!fetchCashbackError && cashbackRecords && cashbackRecords.length > 0) {
            const valorTotalCashback = cashbackRecords.reduce((total, cb) => total + cb.valor, 0);
            console.log(`üí≥ Cashback total da venda a ser removido: R$ ${valorTotalCashback.toFixed(2)}`);
            
            // Buscar o saldo atual do cliente para criar registro de d√©bito
            const clienteId = cashbackRecords[0].cliente_id;
            const { data: ultimoRegistro } = await supabaseClient
                .from('cashback')
                .select('saldo_atual')
                .eq('cliente_id', clienteId)
                .eq('id_empresa', window.currentCompanyId)
                .order('created_at', { ascending: false })
                .limit(1);
            
            const saldoAnterior = ultimoRegistro?.[0]?.saldo_atual || 0;
            
            // Deletar os registros de cashback da venda
            const { error: errorCashback } = await supabaseClient
                .from('cashback')
                .delete()
                .eq('venda_id', saleNumber)
                .eq('id_empresa', window.currentCompanyId);
                
            if (errorCashback) {
                console.warn('‚ö†Ô∏è Erro ao deletar cashback:', errorCashback.message);
                // N√£o interrompe o processo, apenas registra o aviso
            } else {
                // Criar registro de d√©bito para ajustar o saldo_atual
                const novoSaldo = saldoAnterior - valorTotalCashback;
                
                await supabaseClient
                    .from('cashback')
                    .insert([{
                        cliente_id: clienteId,
                        venda_id: saleNumber,
                        tipo_operacao: 'debito',
                        valor: valorTotalCashback,
                        saldo_anterior: saldoAnterior,
                        saldo_atual: novoSaldo,
                        descricao: `Devolu√ß√£o completa da venda #${saleNumber}`,
                        id_empresa: window.currentCompanyId,
                        auth_user_id: window.currentUser?.auth_user_id
                    }]);
                
                console.log(`‚úÖ Cashback removido completamente: R$ ${valorTotalCashback.toFixed(2)}`);
                console.log(`üí∞ Saldo de cashback atualizado: R$ ${saldoAnterior.toFixed(2)} ‚Üí R$ ${novoSaldo.toFixed(2)}`);
            }
        } else {
            console.log('‚ÑπÔ∏è Nenhum cashback encontrado para esta venda');
        }
        
        // 3. Buscar e deletar registros de credi√°rio relacionados √† venda devolvida
        console.log('üîÑ Removendo registros de credi√°rio da venda devolvida...');
        
        // Primeiro buscar os registros para mostrar o valor total
        const { data: crediarioRecords, error: fetchCrediarioError } = await supabaseClient
            .from('crediario')
            .select('*')
            .eq('venda_id', saleNumber)
            .eq('id_empresa', window.currentCompanyId);
            
        if (!fetchCrediarioError && crediarioRecords && crediarioRecords.length > 0) {
            const valorTotalCrediario = crediarioRecords.reduce((total, cr) => total + cr.valor_parcela, 0);
            console.log(`üí≥ Credi√°rio total da venda a ser removido: R$ ${valorTotalCrediario.toFixed(2)}`);
            
            // Agora deletar os registros
            const { error: errorCrediario } = await supabaseClient
                .from('crediario')
                .delete()
                .eq('venda_id', saleNumber)
                .eq('id_empresa', window.currentCompanyId);
                
            if (errorCrediario) {
                console.warn('‚ö†Ô∏è Erro ao deletar credi√°rio:', errorCrediario.message);
                // N√£o interrompe o processo, apenas registra o aviso
            } else {
                console.log(`‚úÖ Credi√°rio removido completamente: R$ ${valorTotalCrediario.toFixed(2)}`);
            }
        } else {
            console.log('‚ÑπÔ∏è Nenhum credi√°rio encontrado para esta venda');
        }
        
        // 4. Atualizar status de TODOS os itens para DEVOLVIDO
        const { error: updateError } = await supabaseClient
            .from('vendas')
            .update({
                status: 'DEVOLVIDO',
                motivo_devolucao: reason,
                observacoes_devolucao: notes || null,
                data_devolucao: new Date().toISOString()
            })
            .eq('id_venda', saleNumber)
            .eq('id_empresa', window.currentCompanyId);
            
        if (updateError) throw updateError;
        
        // 5. Registrar movimenta√ß√µes e atualizar estoque para cada item (devolver para o estoque)
        const estoquePromises = itensVenda.map(async (item) => {
            if (item.produto_sku && item.produto_sku !== 'N/A') {
                try {
                    console.log(`üì¶ Devolvendo ${item.quantidade_unit} unidades do SKU ${item.produto_sku} ao estoque`);
                    
                    // 1. Primeiro registrar a movimenta√ß√£o de entrada no estoque
                    console.log(`üîÑ Chamando registrarEntradaDevolucao para produto ${item.produto_nome}`);
                    const movimentacao = await registrarEntradaDevolucao(item, saleNumber, item.quantidade_unit || 0);
                    console.log(`üìä Resultado da movimenta√ß√£o:`, movimentacao);
                    
                    if (!movimentacao.success) {
                        console.error(`‚ùå ERRO ao registrar movimenta√ß√£o de estoque para ${item.produto_nome}:`, movimentacao.error);
                    } else {
                        console.log(`‚úÖ Movimenta√ß√£o de entrada registrada com SUCESSO para ${item.produto_nome}`);
                    }
                    
                    // 2. Depois atualizar o estoque do produto
                    const { data: produto, error: produtoError } = await supabaseClient
                        .from('produtos')
                        .select('quantidade_estoque')
                        .eq('codigo_sku', item.produto_sku)
                        .eq('id_empresa', window.currentCompanyId)
                        .single();
                        
                    if (!produtoError && produto) {
                        const novaQuantidade = (produto.quantidade_estoque || 0) + (item.quantidade_unit || 0);
                        
                        // Atualizar estoque
                        const { error: estoqueError } = await supabaseClient
                            .from('produtos')
                            .update({ 
                                quantidade_estoque: novaQuantidade,
                                updated_at: new Date().toISOString()
                            })
                            .eq('codigo_sku', item.produto_sku)
                            .eq('id_empresa', window.currentCompanyId);
                            
                        if (estoqueError) {
                            console.warn('‚ö†Ô∏è Erro ao atualizar estoque do SKU', item.produto_sku, ':', estoqueError);
                        } else {
                            console.log(`‚úÖ Estoque atualizado: SKU ${item.produto_sku} ‚Üí ${novaQuantidade} unidades`);
                        }
                    } else {
                        console.warn('‚ö†Ô∏è Produto n√£o encontrado para atualizar estoque:', item.produto_sku);
                    }
                } catch (error) {
                    console.warn('‚ö†Ô∏è Erro ao processar estoque do item:', item.produto_sku, error);
                }
            }
        });
        
        // Aguardar todas as atualiza√ß√µes de estoque
        await Promise.all(estoquePromises);
        
        console.log('‚úÖ Devolu√ß√£o completa processada com sucesso!');
        
        // Fechar modal
        document.getElementById('return-modal').classList.remove('show');
        
        // Mostrar sucesso
        showNotificationDevolucao(`Venda #${saleNumber} devolvida com sucesso! Estoque atualizado.`, 'success');
        
        // Recarregar lista de vendas
        await fetchSales();
        
        // Processamento das atualiza√ß√µes do banco conclu√≠do
        console.log('üîÑ Processamento das atualiza√ß√µes no banco conclu√≠do');
        
        // Recarregar lista de produtos se estiver dispon√≠vel (caso esteja na p√°gina de produtos)
        console.log('üîç Verificando se window.fetchProducts est√° dispon√≠vel:', typeof window.fetchProducts);
        if (typeof window.fetchProducts === 'function') {
            try {
                console.log('üìã Iniciando atualiza√ß√£o da lista de produtos ap√≥s devolu√ß√£o de item...');
                await window.fetchProducts();
                console.log('‚úÖ Lista de produtos atualizada com SUCESSO ap√≥s devolu√ß√£o de item');
            } catch (error) {
                console.error('‚ùå ERRO ao atualizar lista de produtos ap√≥s devolu√ß√£o de item:', error);
                console.error('‚ùå Stack trace:', error.stack);
            }
        } else {
            console.warn('‚ö†Ô∏è window.fetchProducts n√£o est√° dispon√≠vel - lista de produtos n√£o ser√° atualizada automaticamente');
        }
        
        // Processamento das atualiza√ß√µes do banco conclu√≠do
        console.log('üîÑ Processamento das atualiza√ß√µes no banco conclu√≠do');
        
        // Recarregar lista de produtos se estiver dispon√≠vel (caso esteja na p√°gina de produtos)
        console.log('üîç Verificando se window.fetchProducts est√° dispon√≠vel:', typeof window.fetchProducts);
        if (typeof window.fetchProducts === 'function') {
            try {
                console.log('üìã Iniciando atualiza√ß√£o da lista de produtos ap√≥s devolu√ß√£o completa...');
                await window.fetchProducts();
                console.log('‚úÖ Lista de produtos atualizada com SUCESSO ap√≥s devolu√ß√£o completa');
            } catch (error) {
                console.error('‚ùå ERRO ao atualizar lista de produtos ap√≥s devolu√ß√£o completa:', error);
                console.error('‚ùå Stack trace:', error.stack);
            }
        } else {
            console.warn('‚ö†Ô∏è window.fetchProducts n√£o est√° dispon√≠vel - lista de produtos n√£o ser√° atualizada automaticamente');
        }
        
    } catch (error) {
        console.error('‚ùå Erro ao processar devolu√ß√£o:', error);
        alert(`Erro ao processar devolu√ß√£o: ${error.message}`);
    } finally {
        // Restaurar bot√£o
        const confirmBtn = document.getElementById('confirm-return-btn');
        if (confirmBtn) {
            confirmBtn.innerHTML = originalText;
            confirmBtn.disabled = false;
        }
    }
}

/**
 * CONFIRMA DEVOLU√á√ÉO DE ITEM ESPEC√çFICO
 * Atualiza status apenas do item selecionado para "DEVOLVIDO"
 */
async function confirmItemReturn() {
    console.log('‚Ü©Ô∏è Confirmando devolu√ß√£o do item espec√≠fico...');
    
    const itemId = document.getElementById('confirm-item-return-btn').dataset.itemId;
    const quantity = parseInt(document.getElementById('return-item-qty').value);
    const reason = document.getElementById('return-item-reason').value;
    const notes = document.getElementById('return-item-notes').value;
    
    if (!reason) {
        alert('Por favor, selecione o motivo da devolu√ß√£o.');
        return;
    }
    
    if (!quantity || quantity <= 0) {
        alert('Por favor, informe uma quantidade v√°lida.');
        return;
    }
    
    if (!itemId) {
        alert('Erro: ID do item n√£o encontrado.');
        return;
    }
    
    try {
        // Mostrar loading
        const confirmBtn = document.getElementById('confirm-item-return-btn');
        const originalText = confirmBtn.innerHTML;
        confirmBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Processando...';
        confirmBtn.disabled = true;
        
        console.log('üîÑ Processando devolu√ß√£o do item ID:', itemId);
        
        // 1. Buscar dados do item
        const { data: itemData, error: fetchError } = await supabaseClient
            .from('vendas')
            .select('*')
            .eq('id', itemId)
            .single();
            
        if (fetchError) throw fetchError;
        
        if (!itemData) {
            throw new Error('Item n√£o encontrado.');
        }
        
        // VERIFICAR SE J√Å FOI DEVOLVIDO
        if (itemData.status === 'DEVOLVIDO') {
            alert('Este produto j√° foi devolvido anteriormente.');
            // Restaurar bot√£o antes de retornar
            confirmBtn.innerHTML = '<i class="fas fa-undo"></i> Confirmar Devolu√ß√£o';
            confirmBtn.disabled = false;
            return;
        }
        
        console.log('üì¶ Item encontrado:', itemData.produto_nome);
        
        // Verificar quantidade dispon√≠vel para devolu√ß√£o
        if (quantity > itemData.quantidade_unit) {
            throw new Error(`Quantidade inv√°lida. M√°ximo dispon√≠vel: ${itemData.quantidade_unit}`);
        }
        
        // 2. Ajustar cashback proporcionalmente ao valor do item devolvido
        console.log('üîÑ Ajustando cashback proporcional baseado no valor do item devolvido...');
        
        // Primeiro, buscar o valor total da venda para calcular a propor√ß√£o correta
        const { data: todosItensVenda, error: fetchItensError } = await supabaseClient
            .from('vendas')
            .select('subtotal_item')
            .eq('id_venda', itemData.id_venda)
            .eq('id_empresa', window.currentCompanyId);
            
        if (!fetchItensError && todosItensVenda && todosItensVenda.length > 0) {
            const valorTotalVenda = todosItensVenda.reduce((total, item) => total + (item.subtotal_item || 0), 0);
            const valorItemDevolvido = quantity * itemData.preco_unitario;
            const proporcaoValor = valorItemDevolvido / valorTotalVenda; // Propor√ß√£o baseada no valor
            
            console.log(`üí∞ Valor total da venda: R$ ${valorTotalVenda}`);
            console.log(`üí∞ Valor do item devolvido: R$ ${valorItemDevolvido}`);
            console.log(`üìä Propor√ß√£o por valor: ${(proporcaoValor * 100).toFixed(2)}%`);
            
            const { data: cashbackRecords, error: fetchCashbackError } = await supabaseClient
                .from('cashback')
                .select('*')
                .eq('venda_id', itemData.id_venda)
                .eq('id_empresa', window.currentCompanyId);
                
            if (!fetchCashbackError && cashbackRecords && cashbackRecords.length > 0) {
                const valorTotalCashback = cashbackRecords.reduce((total, cb) => total + cb.valor, 0);
                console.log(`üí≥ Cashback total da venda: R$ ${valorTotalCashback.toFixed(2)}`);
                
                let valorTotalCashbackRemovido = 0;
                
                // Buscar o saldo atual do cliente para criar registro de d√©bito
                const { data: ultimoRegistro } = await supabaseClient
                    .from('cashback')
                    .select('saldo_atual, cliente_id')
                    .eq('cliente_id', cashbackRecords[0].cliente_id)
                    .eq('id_empresa', window.currentCompanyId)
                    .order('created_at', { ascending: false })
                    .limit(1);
                
                const saldoAnterior = ultimoRegistro?.[0]?.saldo_atual || 0;
                const clienteId = cashbackRecords[0].cliente_id;
                
                for (const cashback of cashbackRecords) {
                    const valorCashbackProporcional = cashback.valor * proporcaoValor;
                    const novoValorCashback = cashback.valor - valorCashbackProporcional;
                    
                    valorTotalCashbackRemovido += valorCashbackProporcional;
                    
                    if (novoValorCashback <= 0.01) { // Considera valores muito pequenos como zero
                        // Se o valor ficar zero ou negativo, deletar o registro
                        await supabaseClient
                            .from('cashback')
                            .delete()
                            .eq('id', cashback.id);
                        console.log(`‚úÖ Cashback deletado completamente: R$ ${cashback.valor.toFixed(2)}`);
                    } else {
                        // Atualizar com o novo valor
                        await supabaseClient
                            .from('cashback')
                            .update({ valor: parseFloat(novoValorCashback.toFixed(2)) })
                            .eq('id', cashback.id);
                        console.log(`‚úÖ Cashback ajustado: R$ ${cashback.valor.toFixed(2)} ‚Üí R$ ${novoValorCashback.toFixed(2)}`);
                    }
                }
                
                // Criar registro de d√©bito para ajustar o saldo_atual
                if (valorTotalCashbackRemovido > 0) {
                    const novoSaldo = saldoAnterior - valorTotalCashbackRemovido;
                    
                    await supabaseClient
                        .from('cashback')
                        .insert([{
                            cliente_id: clienteId,
                            venda_id: itemData.id_venda,
                            tipo_operacao: 'debito',
                            valor: valorTotalCashbackRemovido,
                            saldo_anterior: saldoAnterior,
                            saldo_atual: novoSaldo,
                            descricao: `Devolu√ß√£o parcial - Item: ${itemData.produto_nome}`,
                            id_empresa: window.currentCompanyId,
                            auth_user_id: window.currentUser?.auth_user_id
                        }]);
                    
                    console.log(`üí∞ Saldo de cashback atualizado: R$ ${saldoAnterior.toFixed(2)} ‚Üí R$ ${novoSaldo.toFixed(2)}`);
                }
                
                console.log(`üîª Valor total de cashback removido: R$ ${valorTotalCashbackRemovido.toFixed(2)}`);
                console.log(`üí∞ Cashback restante na venda: R$ ${(valorTotalCashback - valorTotalCashbackRemovido).toFixed(2)}`);
            } else {
                console.log('‚ÑπÔ∏è Nenhum cashback encontrado para esta venda');
            }
        }
        
        // 3. Ajustar credi√°rio proporcionalmente ao valor do item devolvido
        console.log('üîÑ Ajustando credi√°rio proporcional baseado no valor do item devolvido...');
        
        // Usar a mesma propor√ß√£o por valor calculada acima
        if (!fetchItensError && todosItensVenda && todosItensVenda.length > 0) {
            const valorTotalVenda = todosItensVenda.reduce((total, item) => total + (item.subtotal_item || 0), 0);
            const valorItemDevolvido = quantity * itemData.preco_unitario;
            const proporcaoValor = valorItemDevolvido / valorTotalVenda; // Propor√ß√£o baseada no valor
            
            const { data: crediarioRecords, error: fetchCrediarioError } = await supabaseClient
                .from('crediario')
                .select('*')
                .eq('venda_id', itemData.id_venda)
                .eq('id_empresa', window.currentCompanyId);
                
            if (!fetchCrediarioError && crediarioRecords && crediarioRecords.length > 0) {
                const valorTotalCrediario = crediarioRecords.reduce((total, cr) => total + cr.valor_parcela, 0);
                console.log(`üí≥ Credi√°rio total da venda: R$ ${valorTotalCrediario.toFixed(2)}`);
                
                let valorTotalCrediarioRemovido = 0;
                
                for (const crediario of crediarioRecords) {
                    const valorCrediarioProporcional = crediario.valor_parcela * proporcaoValor;
                    const novoValorCrediario = crediario.valor_parcela - valorCrediarioProporcional;
                    
                    valorTotalCrediarioRemovido += valorCrediarioProporcional;
                    
                    if (novoValorCrediario <= 0.01) { // Considera valores muito pequenos como zero
                        // Se o valor ficar zero ou negativo, deletar o registro
                        await supabaseClient
                            .from('crediario')
                            .delete()
                            .eq('id', crediario.id);
                        console.log(`‚úÖ Credi√°rio deletado completamente: R$ ${crediario.valor_parcela.toFixed(2)}`);
                    } else {
                        // Atualizar com o novo valor
                        await supabaseClient
                            .from('crediario')
                            .update({ valor_parcela: parseFloat(novoValorCrediario.toFixed(2)) })
                            .eq('id', crediario.id);
                        console.log(`‚úÖ Credi√°rio ajustado: R$ ${crediario.valor_parcela.toFixed(2)} ‚Üí R$ ${novoValorCrediario.toFixed(2)}`);
                    }
                }
                
                console.log(`üîª Valor total de credi√°rio removido: R$ ${valorTotalCrediarioRemovido.toFixed(2)}`);
                console.log(`üí∞ Credi√°rio restante na venda: R$ ${(valorTotalCrediario - valorTotalCrediarioRemovido).toFixed(2)}`);
            } else {
                console.log('‚ÑπÔ∏è Nenhum credi√°rio encontrado para esta venda');
            }
        }
        
        // 4. Se a quantidade devolvida √© igual √† vendida, marcar como DEVOLVIDO
        if (quantity === itemData.quantidade_unit) {
            console.log('üìù Devolu√ß√£o total do item - marcando como DEVOLVIDO');
            
            const { error: updateError } = await supabaseClient
                .from('vendas')
                .update({
                    status: 'DEVOLVIDO',
                    motivo_devolucao: reason,
                    observacoes_devolucao: notes || null,
                    data_devolucao: new Date().toISOString()
                })
                .eq('id', itemId);
                
            if (updateError) throw updateError;
            
        } else {
            // 5. Se √© devolu√ß√£o parcial, criar nova entrada para a parte devolvida
            console.log('üìù Devolu√ß√£o parcial - criando entrada separada');
            
            // Atualizar quantidade do item original
            const novaQuantidadeOriginal = itemData.quantidade_unit - quantity;
            const { error: updateOriginalError } = await supabaseClient
                .from('vendas')
                .update({
                    quantidade_unit: novaQuantidadeOriginal,
                    subtotal_item: novaQuantidadeOriginal * itemData.preco_unitario,
                    updated_at: new Date().toISOString()
                })
                .eq('id', itemId);
                
            if (updateOriginalError) throw updateOriginalError;
            
            // Criar nova entrada para a parte devolvida
            const itemDevolvido = {
                ...itemData,
                id: undefined, // Remover ID para criar novo registro
                quantidade_unit: quantity,
                subtotal_item: quantity * itemData.preco_unitario,
                status: 'DEVOLVIDO',
                motivo_devolucao: reason,
                observacoes_devolucao: notes || null,
                data_devolucao: new Date().toISOString(),
                created_at: new Date().toISOString()
            };
            
            delete itemDevolvido.id; // Garantir que n√£o tem ID
            
            const { error: insertError } = await supabaseClient
                .from('vendas')
                .insert([itemDevolvido]);
                
            if (insertError) throw insertError;
        }
        
        // 6. Registrar movimenta√ß√£o e atualizar estoque (devolver para o estoque)
        if (itemData.produto_sku && itemData.produto_sku !== 'N/A') {
            try {
                console.log(`üì¶ Devolvendo ${quantity} unidades do SKU ${itemData.produto_sku} ao estoque`);
                
                // 1. Primeiro registrar a movimenta√ß√£o de entrada no estoque
                console.log(`üîÑ Chamando registrarEntradaDevolucao para produto ${itemData.produto_nome}`);
                const movimentacao = await registrarEntradaDevolucao(itemData, itemData.id_venda || 'N/A', quantity);
                console.log(`üìä Resultado da movimenta√ß√£o:`, movimentacao);
                
                if (!movimentacao.success) {
                    console.error(`‚ùå ERRO ao registrar movimenta√ß√£o de estoque para ${itemData.produto_nome}:`, movimentacao.error);
                } else {
                    console.log(`‚úÖ Movimenta√ß√£o de entrada registrada com SUCESSO para ${itemData.produto_nome}`);
                }
                
                // 2. Depois atualizar o estoque do produto
                const { data: produto, error: produtoError } = await supabaseClient
                    .from('produtos')
                    .select('quantidade_estoque')
                    .eq('codigo_sku', itemData.produto_sku)
                    .eq('id_empresa', window.currentCompanyId)
                    .single();
                    
                if (!produtoError && produto) {
                    const novaQuantidade = (produto.quantidade_estoque || 0) + quantity;
                    
                    const { error: estoqueError } = await supabaseClient
                        .from('produtos')
                        .update({ 
                            quantidade_estoque: novaQuantidade,
                            updated_at: new Date().toISOString()
                        })
                        .eq('codigo_sku', itemData.produto_sku)
                        .eq('id_empresa', window.currentCompanyId);
                        
                    if (estoqueError) {
                        console.warn('‚ö†Ô∏è Erro ao atualizar estoque:', estoqueError);
                    } else {
                        console.log(`‚úÖ Estoque atualizado: SKU ${itemData.produto_sku} ‚Üí ${novaQuantidade} unidades`);
                    }
                } else {
                    console.warn('‚ö†Ô∏è Produto n√£o encontrado para atualizar estoque:', itemData.produto_sku);
                }
            } catch (error) {
                console.warn('‚ö†Ô∏è Erro ao atualizar estoque:', error);
            }
        }
        
        console.log('‚úÖ Devolu√ß√£o do item processada com sucesso!');
        
        // Fechar modal
        document.getElementById('item-return-modal').classList.remove('show');
        
        // Mostrar sucesso
        showNotificationDevolucao(`Item devolvido com sucesso! Quantidade: ${quantity} unidades.`, 'success');
        
        // Recarregar detalhes da venda se estiver aberto
        const saleDetailsModal = document.getElementById('sale-details-modal');
        if (saleDetailsModal && saleDetailsModal.classList.contains('show')) {
            const saleId = itemData.id_venda;
            console.log('üîÑ Recarregando detalhes da venda:', saleId);
            await showSaleDetailsModal(saleId);
        }
        
        // Recarregar lista de vendas
        await fetchSales();
        
    } catch (error) {
        console.error('‚ùå Erro ao processar devolu√ß√£o do item:', error);
        alert(`Erro ao processar devolu√ß√£o: ${error.message}`);
    } finally {
        // Restaurar bot√£o
        const confirmBtn = document.getElementById('confirm-item-return-btn');
        if (confirmBtn) {
            confirmBtn.innerHTML = originalText;
            confirmBtn.disabled = false;
        }
    }
}

/**
 * BUSCA DEVOLU√á√ïES POR PER√çODO
 * Para relat√≥rios e an√°lises
 */
async function buscarDevolucoesPorPeriodo(dataInicio, dataFim) {
    try {
        console.log('üìä Buscando devolu√ß√µes do per√≠odo:', dataInicio, 'at√©', dataFim);
        
        let query = supabaseClient
            .from('vendas')
            .select(`
                id_venda,
                produto_nome,
                produto_sku,
                quantidade_unit,
                total_venda,
                motivo_devolucao,
                observacoes_devolucao,
                data_devolucao,
                cliente_nome
            `)
            .eq('id_empresa', window.currentCompanyId)
            .eq('status', 'DEVOLVIDO')
            .order('data_devolucao', { ascending: false });
            
        if (dataInicio) {
            query = query.gte('data_devolucao', dataInicio);
        }
        
        if (dataFim) {
            query = query.lte('data_devolucao', `${dataFim} 23:59:59`);
        }
        
        const { data, error } = await query;
        
        if (error) throw error;
        
        console.log(`‚úÖ Encontradas ${data?.length || 0} devolu√ß√µes no per√≠odo`);
        return data || [];
        
    } catch (error) {
        console.error('‚ùå Erro ao buscar devolu√ß√µes:', error);
        throw error;
    }
}

/**
 * GERA RELAT√ìRIO DE DEVOLU√á√ïES
 * Agrupa por motivo, produto, per√≠odo etc.
 */
function gerarRelatorioDevolucoes(devolucoes) {
    const relatorio = {
        totalDevolucoes: devolucoes.length,
        valorTotalDevolvido: devolucoes.reduce((acc, dev) => acc + (dev.total_venda || 0), 0),
        
        // Agrupar por motivo
        porMotivo: devolucoes.reduce((acc, dev) => {
            const motivo = dev.motivo_devolucao || 'N√£o informado';
            acc[motivo] = (acc[motivo] || 0) + 1;
            return acc;
        }, {}),
        
        // Agrupar por produto
        porProduto: devolucoes.reduce((acc, dev) => {
            const produto = dev.produto_nome || 'Produto n√£o informado';
            if (!acc[produto]) {
                acc[produto] = { quantidade: 0, valores: 0 };
            }
            acc[produto].quantidade += dev.quantidade_unit || 0;
            acc[produto].valores += dev.total_venda || 0;
            return acc;
        }, {}),
        
        // Produtos mais devolvidos
        produtosMaisDevolvidos: Object.entries(
            devolucoes.reduce((acc, dev) => {
                const produto = dev.produto_nome || 'Produto n√£o informado';
                acc[produto] = (acc[produto] || 0) + (dev.quantidade_unit || 0);
                return acc;
            }, {})
        ).sort(([,a], [,b]) => b - a).slice(0, 10)
    };
    
    return relatorio;
}

/**
 * VALIDA√á√ÉO DE DEVOLU√á√ÉO
 * Verifica se a devolu√ß√£o √© poss√≠vel
 */
function validarDevolucao(item, quantidadeDevolver) {
    const validacao = {
        valida: true,
        motivos: []
    };
    
    // Verificar se j√° foi devolvido
    if (item.status === 'DEVOLVIDO') {
        validacao.valida = false;
        validacao.motivos.push('Este item j√° foi devolvido anteriormente');
    }
    
    // Verificar quantidade
    if (quantidadeDevolver <= 0 || quantidadeDevolver > item.quantidade_unit) {
        validacao.valida = false;
        validacao.motivos.push(`Quantidade inv√°lida. Dispon√≠vel: ${item.quantidade_unit}`);
    }
    
    // Verificar prazo (se aplic√°vel)
    const diasLimite = 30; // Configur√°vel
    const dataVenda = new Date(item.hora_venda);
    const agora = new Date();
    const diasPassados = Math.floor((agora - dataVenda) / (1000 * 60 * 60 * 24));
    
    if (diasPassados > diasLimite) {
        validacao.valida = false;
        validacao.motivos.push(`Prazo para devolu√ß√£o expirado (${diasPassados} dias). Limite: ${diasLimite} dias`);
    }
    
    return validacao;
}

/**
 * MOSTRAR NOTIFICA√á√ÉO NA TELA
 * Sistema visual de notifica√ß√µes igual ao de adicionar produto
 */
function showNotificationDevolucao(message, type = 'success') {
    console.log(`üì¢ [${type.toUpperCase()}] ${message}`);
    
    // Remover notifica√ß√£o anterior se existir
    const existingNotification = document.querySelector('.notification-devolucao');
    if (existingNotification) {
        existingNotification.remove();
    }
    
    // Criar elemento de notifica√ß√£o
    const notification = document.createElement('div');
    notification.className = `notification-devolucao notification-${type}`;
    
    // Definir √≠cone baseado no tipo
    let icon = '';
    switch (type) {
        case 'success':
            icon = '<i class="fas fa-check-circle"></i>';
            break;
        case 'error':
            icon = '<i class="fas fa-exclamation-triangle"></i>';
            break;
        case 'warning':
            icon = '<i class="fas fa-exclamation-circle"></i>';
            break;
        default:
            icon = '<i class="fas fa-info-circle"></i>';
    }
    
    notification.innerHTML = `
        <div class="notification-content">
            ${icon}
            <span class="notification-message">${message}</span>
            <button class="notification-close" onclick="this.parentElement.parentElement.remove()">
                <i class="fas fa-times"></i>
            </button>
        </div>
    `;
    
    // Adicionar estilos CSS se n√£o existirem
    if (!document.getElementById('notification-styles-devolucao')) {
        const styles = document.createElement('style');
        styles.id = 'notification-styles-devolucao';
        styles.textContent = `
            .notification-devolucao {
                position: fixed;
                top: 20px;
                right: 20px;
                min-width: 350px;
                max-width: 500px;
                padding: 0;
                border-radius: 8px;
                box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
                z-index: 9999;
                animation: slideInRight 0.3s ease-out;
                font-family: 'Inter', sans-serif;
                border: none;
                overflow: hidden;
            }
            
            .notification-success {
                background: linear-gradient(135deg, #10b981, #059669);
                color: white;
            }
            
            .notification-error {
                background: linear-gradient(135deg, #ef4444, #dc2626);
                color: white;
            }
            
            .notification-warning {
                background: linear-gradient(135deg, #f59e0b, #d97706);
                color: white;
            }
            
            .notification-info {
                background: linear-gradient(135deg, #3b82f6, #2563eb);
                color: white;
            }
            
            .notification-content {
                display: flex;
                align-items: center;
                gap: 12px;
                padding: 16px 20px;
                position: relative;
            }
            
            .notification-content i:first-child {
                font-size: 18px;
                flex-shrink: 0;
            }
            
            .notification-message {
                flex: 1;
                font-size: 14px;
                font-weight: 500;
                line-height: 1.4;
            }
            
            .notification-close {
                background: none;
                border: none;
                color: rgba(255, 255, 255, 0.8);
                cursor: pointer;
                padding: 4px;
                border-radius: 4px;
                transition: all 0.2s ease;
                display: flex;
                align-items: center;
                justify-content: center;
                width: 24px;
                height: 24px;
            }
            
            .notification-close:hover {
                background: rgba(255, 255, 255, 0.2);
                color: white;
            }
            
            .notification-close i {
                font-size: 12px;
            }
            
            @keyframes slideInRight {
                from {
                    transform: translateX(100%);
                    opacity: 0;
                }
                to {
                    transform: translateX(0);
                    opacity: 1;
                }
            }
            
            @keyframes slideOutRight {
                from {
                    transform: translateX(0);
                    opacity: 1;
                }
                to {
                    transform: translateX(100%);
                    opacity: 0;
                }
            }
            
            .notification-devolucao.removing {
                animation: slideOutRight 0.3s ease-in forwards;
            }
            
            /* Responsividade */
            @media (max-width: 768px) {
                .notification-devolucao {
                    top: 10px;
                    right: 10px;
                    left: 10px;
                    min-width: auto;
                    max-width: none;
                }
            }
        `;
        document.head.appendChild(styles);
    }
    
    // Adicionar ao body
    document.body.appendChild(notification);
    
    // Auto remover ap√≥s 5 segundos (exceto erros que ficam mais tempo)
    const autoRemoveTime = type === 'error' ? 8000 : 5000;
    setTimeout(() => {
        if (notification.parentNode) {
            notification.classList.add('removing');
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.remove();
                }
            }, 300);
        }
    }, autoRemoveTime);
}

// Exportar fun√ß√µes para uso global
window.confirmReturn = confirmReturn;
window.confirmItemReturn = confirmItemReturn;
window.buscarDevolucoesPorPeriodo = buscarDevolucoesPorPeriodo;
window.gerarRelatorioDevolucoes = gerarRelatorioDevolucoes;
window.validarDevolucao = validarDevolucao;

console.log('‚úÖ Sistema profissional de devolu√ß√µes carregado');
console.log('üìã Fun√ß√µes dispon√≠veis:');
console.log('   - confirmReturn() ‚Üí Devolu√ß√£o completa da venda');
console.log('   - confirmItemReturn() ‚Üí Devolu√ß√£o de item espec√≠fico');
console.log('   - buscarDevolucoesPorPeriodo() ‚Üí Buscar devolu√ß√µes por per√≠odo');
console.log('   - gerarRelatorioDevolucoes() ‚Üí Gerar relat√≥rio de an√°lise');
console.log('   - validarDevolucao() ‚Üí Validar se devolu√ß√£o √© poss√≠vel');
